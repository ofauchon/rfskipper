name: build

on: 
  push:
    branches: 
      - master

jobs:
  main:
    name: BuildMaster 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Setup Python
        uses: actions/setup-python@master
        with:
          python-version: '3.x'
      - name: Install Platform IO
        run: |
          python -m pip install --upgrade pip
          pip install -U platformio
      - name: Build
        run: platformio run
      - name: ZipFirmware # This would actually build your project, using zip for an example artifact
        run: |
          zip --junk-paths rfskipper-bin-${{ github.sha }} .pio/build/bluepill_f103c8/firmware.bin
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./rfskipper-bin-${{ github.sha }}.zip
          asset_name: rfskipper-bin-${{ github.sha }}.zip
          asset_content_type: application/zip
